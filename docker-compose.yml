version: '3.6'

services:
  gitea:
    container_name: gitea
    image: gitea/gitea
    restart: unless-stopped
    environment:
      # https://docs.gitea.io/en-us/install-with-docker/#environments-variables
      - RUN_MODE=prod
      - GITEA__webhook__ALLOWED_HOST_LIST=drone.dakota.eu
      - GITEA__metrics__ENABLED=true
    ports:
      - "10022:22"
    networks:
      - cicd_net
    volumes:
      - ./gitea:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitea.rule=Host(`gitea.dakota.eu`)"
      - "traefik.http.routers.gitea.entrypoints=web"
      - "traefik.http.routers.gitea.service=gitea"
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"

  minio:
    image: minio/minio
    container_name: minio
    volumes:
      - ./minio/data1:/data1
      - ./minio/data2:/data2
      - ./minio/data3:/data3
      - ./minio/data4:/data4
    entrypoint: sh
    command: -c 'minio server /data{1..4} --console-address ":9001"'
    networks:
      - cicd_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.service=minio"
      - "traefik.http.routers.minio.rule=Host(`s3.dakota.eu`)"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.routers.minio-console.rule=Host(`minio.dakota.eu`)"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"

  drone:
    container_name: drone
    image: drone/drone:2.8.0
    restart: unless-stopped
    depends_on:
      - gitea
    environment:
      - DRONE_GITEA_SERVER=http://gitea.dakota.eu/
      - DRONE_RPC_SECRET=34618ee909cb804b2d059fa1b3905cf5
      - DRONE_RUNNER_CAPACITY=4
      - DRONE_SERVER_PROTO=http
      - DRONE_SERVER_HOST=drone.dakota.eu
      - DRONE_NETWORK=cicd_net
      - DRONE_RUNNER_NETWORKS=cicd_net
      - DRONE_LOGS_DEBUG=true
      - DRONE_LOGS_TEXT=true
      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_COLOR=true
      - DRONE_S3_ENDPOINT=http://minio:9000
      - DRONE_S3_BUCKET=drone
      - DRONE_S3_SKIP_VERIFY=true
      - DRONE_S3_PATH_STYLE=true
      - AWS_ACCESS_KEY_ID=drone
      - AWS_SECRET_ACCESS_KEY=drone-secret
        #- AWS_ACCESS_KEY_ID=drone
        #- AWS_SECRET_ACCESS_KEY=34618ee909cb804b2d059fa1b3905cf5
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_REGION=us-east-1
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
      - DRONE_USER_CREATE=username:prometheus,machine:true,admin:true,token:34618ee909cb804b2d059fa1b3905cf5
    networks:
      - cicd_net
    volumes:
      - ./drone:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drone.rule=Host(`drone.dakota.eu`)"
      - "traefik.http.routers.drone.entrypoints=web"

  drone-agent:
    container_name: drone_runner
    image: drone/drone-runner-docker:1.8.0
    restart: unless-stopped
    depends_on:
      - drone
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone
      - DRONE_RPC_SECRET=34618ee909cb804b2d059fa1b3905cf5
      - DRONE_RUNNER_NAME=runners
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_NETWORK=cicd_net
      - DRONE_RUNNER_NETWORKS=cicd_net
      - DRONE_LOGS_DEBUG=true
      - DRONE_LOGS_TEXT=true
      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_COLOR=true
      - DRONE_LOGS_TRACE=true
    networks:
      - cicd_net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  s3www:
    image: y4m4/s3www:latest
    container_name: s3www
    command:
      - "-endpoint=http://minio:9000"
      - "-accessKey=webreader"
      - "-secretKey=webreader-secret"
      - "-bucket=public"
      - "-address=0.0.0.0:8080"
    restart: unless-stopped
    networks:
      - cicd_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.www.rule=Host(`dakota.eu`)"
      - "traefik.http.routers.www.entrypoints=web"

  proxy:
    image: traefik
    container_name: "traefik"
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--accesslog=true"
      - "--metrics"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
    restart: unless-stopped
    networks:
      - cicd_net
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.rule=Host(`traefik.dakota.eu`)" # Change this to your domain
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

networks:
  cicd_net:
    name: cicd_net
